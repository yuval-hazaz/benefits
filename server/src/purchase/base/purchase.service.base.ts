/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Purchase, Benefit, Customer } from "@prisma/client";

export class PurchaseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PurchaseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseFindManyArgs>
  ): Promise<number> {
    return this.prisma.purchase.count(args);
  }

  async findMany<T extends Prisma.PurchaseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseFindManyArgs>
  ): Promise<Purchase[]> {
    return this.prisma.purchase.findMany(args);
  }
  async findOne<T extends Prisma.PurchaseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseFindUniqueArgs>
  ): Promise<Purchase | null> {
    return this.prisma.purchase.findUnique(args);
  }
  async create<T extends Prisma.PurchaseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseCreateArgs>
  ): Promise<Purchase> {
    return this.prisma.purchase.create<T>(args);
  }
  async update<T extends Prisma.PurchaseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseUpdateArgs>
  ): Promise<Purchase> {
    return this.prisma.purchase.update<T>(args);
  }
  async delete<T extends Prisma.PurchaseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseDeleteArgs>
  ): Promise<Purchase> {
    return this.prisma.purchase.delete(args);
  }

  async getBenefit(parentId: string): Promise<Benefit | null> {
    return this.prisma.purchase
      .findUnique({
        where: { id: parentId },
      })
      .benefit();
  }

  async getCustomer(parentId: string): Promise<Customer | null> {
    return this.prisma.purchase
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
