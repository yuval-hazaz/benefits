/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Benefit, Purchase } from "@prisma/client";

export class BenefitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.BenefitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BenefitFindManyArgs>
  ): Promise<number> {
    return this.prisma.benefit.count(args);
  }

  async findMany<T extends Prisma.BenefitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BenefitFindManyArgs>
  ): Promise<Benefit[]> {
    return this.prisma.benefit.findMany(args);
  }
  async findOne<T extends Prisma.BenefitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BenefitFindUniqueArgs>
  ): Promise<Benefit | null> {
    return this.prisma.benefit.findUnique(args);
  }
  async create<T extends Prisma.BenefitCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BenefitCreateArgs>
  ): Promise<Benefit> {
    return this.prisma.benefit.create<T>(args);
  }
  async update<T extends Prisma.BenefitUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BenefitUpdateArgs>
  ): Promise<Benefit> {
    return this.prisma.benefit.update<T>(args);
  }
  async delete<T extends Prisma.BenefitDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BenefitDeleteArgs>
  ): Promise<Benefit> {
    return this.prisma.benefit.delete(args);
  }

  async findPurchases(
    parentId: string,
    args: Prisma.PurchaseFindManyArgs
  ): Promise<Purchase[]> {
    return this.prisma.benefit
      .findUnique({
        where: { id: parentId },
      })
      .purchases(args);
  }
}
